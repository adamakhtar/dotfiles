;; GOKU_EDN_CONFIG_FILE="karabiner.edn" goku
;; main contains multiple manipulators
;; each manipulator has a description and multiple rules

;; main                -> {:main [{:des "..." :rules [rule1 rule2 ...]}]}
;; manipulator         -> {:des "..." :rules [rule1 rule2 ...]}
;; manipulator's rules -> [rule1 rule2 ...]
{
  ;; AA - not sure what these timings actually mean but I found them from here
  ;; https://github.com/yqrashawn/yqdotfiles/blob/0205e4bb7a1c76f3e79ceb2c915b4e85bc8062ba/.config/karabiner.edn#L1-L2
  ;; and they seem to work and prevent misfirings when usign sim keys.
  :alone 500 ; hold for .. ms to register single tap
  :delay 500 ; TODO: not sure what it's for
  :held 500 ; time after which the key press is delayed
  :sim 50 ; keys need to be pressed within this threshold to be considered simultaneous
  ;; :simlayer-threshold 130
  :modifiers {
    :super-hyper [:command :shift :control :option :fn]
    :hyper [:command :shift :control :option]
    :cos [:command :shift :option]
    :cst [:command :shift :control]
    :co [:command :option]
    :cs [:command :shift]
    :ct [:command :control]
    :to [:control :option]
    :ts [:control :shift]
    :os [:option :shift]
    ;
  }

  :devices {
    :kinesis [{:vendor_id 1523 :product_id 7}]
    :internal [{:vendor_id 1452 :product_id 833}]
  }

  :applications {
    :code ["com.microsoft.VSCode"]
  }

  :simlayers {
    :1-mode {:key :1}
    :0-mode {:key :0}
    :a--alt-mode {:key :a}
    :e-mode {:key :e}
    :s-mode {:key :s}
    :d-mode {:key :d}
    :v--mode {:key :v}
    :n--mode {:key :n}
    :g--cursor-mode {:key :g}
    :f-mode {:key :f}
    :w-mode {:key :w}
    :quote-mode {:key :quote}
  }
  :templates {
    :launch "osascript -e 'tell application \"%s\" to activate'"
    :alfred "osascript -e 'tell application \"Alfred 3\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :open "open \"%s\""
    :open-a "open -a '%s'"
    :open-firefox "osascript -e '
      set address to \"%s\"
      tell application \"firefox\"
        open location \"http://\" & address
      end tell
      '"
    :paste "osascript -e '
            set the clipboard to \"%s\"
            tell application \"System Events\"
                    keystroke \"v\" using command down
            end tell
            '"
  }

  :tos {
    :expand_selection {:key :right_arrow :modi :cst}
    :shrink_selection {:key :left_arrow :modi :cst}
    :cursor_find_match {:key :d :modi :command}
    :cursor_above {:key :up_arrow :modi :co}
    :cursor_below {:key :down_arrow :modi :co}
    :multi_word_select  {:key :d :modi :command}
    :acejump {:key :j :modi :cos}
    :acejump_line {:key :l :modi :cos}
    :acejump_selection {:key :s :modi :cos}
    :acejump_multi {:key :m :modi :cos}
    :alfred_shortcut {:key :spacebar :modi :option}
    :emoji_picker {:key :spacebar :modi :ct} ;!CTspacebar
  }

  :main [

    {:des "one shots"
     :rules [
       ; disable default caps lock behaviour. Tap to open alfred. Hold to activate launch mode
       [:right_option :right_option nil {:alone :alfred_shortcut}]
     ]
    }

    {:des "caps lock"
     :rules [
       ; disable default caps lock behaviour. Tap to open alfred. Hold to activate launch mode
       [:caps_lock {:set ["launch-mode", 1]} nil {:alone :escape :afterup {:set ["launch-mode", 0]}}]
     ]
    }

    {:des "escape to function key"
     :rules [
       [:escape :fn]
     ]
    }

    {:des "super hyper key"
     :rules [
       [:fn [:left_command :left_shift :left_option :left_control :fn], :internal, {:alone :vk_none}]
       [:end [:left_command :left_shift :left_option :left_control :fn], :kinesis, {:alone :vk_none}]
     ]
    }

    {:des "hyper key"
     :rules [
       ; disable default caps lock behaviour. Tap to open alfred. Hold to activate launch mode
       [:tab [:left_shift :left_command :left_option :left_control] :internal {:alone :tab}]
       [:home [:left_shift :left_command :left_option :left_control] :kinesis {:alone :vk_none}]
     ]
    }

    {:des "shift acts as backspace"
     :rules [
      ;  delete single letters backwards or forwards
       [:left_shift :left_shift nil {:alone :delete_or_backspace}]
       [:right_shift :right_shift nil {:alone :delete_forward}]
      ; delete whole words backwards or forwards
       [{:key :right_shift :modi :left_shift} :!Odelete_forward]
       [{:key :left_shift :modi :right_shift} :!Odelete_or_backspace]
     ]
    }

    {:des "code"
      :rules [
        ; [:condi :code :n--mode]
        ; [:a :close_bracket] ; [
        ; [:s :!Sclose_bracket] ; {
        ; [:d :!Sbackslash] ; }
        ; [:f :backslash] ; ]
        ; [:g :international1] ; _

        ; [:condi :code :v--mode]
        ; [:h, :hyphen] ; -
        ; [:j, :!S8] ; (
        ; [:k, :!S9] ; )

        ; [:condi :code :g--mode]
        ; [:j, [:spacebar :!Shyphen :spacebar]] ; =
        ; [:k, [:!S2 :!S2 :left_arrow]] ; ""
        ; [:l, [:spacebar :!Shyphen :!Speriod :spacebar]] ; =>
      ]
    }
    {:des "cursor: moving"
      :rules [:f-mode
        [:condi :f-mode]
        [:##y :!Cleft_arrow] ; move to start of line
        [:##u :!Oleft_arrow] ; move 1 word left
        [:##i :!Oright_arrow] ; move one word right
        [:##o :!Cright_arrow] ; move to end of line

        [:##h :left_arrow]
        [:##j :down_arrow]
        [:##k :up_arrow]
        [:##l :right_arrow]

        [:##n :!Cdown_arrow] ; end
        [:##m :page_down]  ; page down
        [:##comma :page_up] ; page up
        [:##period :!Cup_arrow] ; home
      ]
    }

    {:des "cursor: selecting"
      :rules [:d-mode
        [:condi :d-mode]
        [:##y :!CSleft_arrow] ; select to start of line
        [:##u :!SOleft_arrow] ; select 1 word left
        [:##i :!SOright_arrow] ; select 1 word right
        [:##o :!CSright_arrow] ; select to end of line

        [:##h :!Sleft_arrow]
        [:##j :!Sdown_arrow]
        [:##k :!Sup_arrow]
        [:##l :!Sright_arrow]

        [:##n :!SCdown_arrow] ; select to end
        [:##m :!Spage_down]  ; select page down
        [:##comma :!Spage_up] ; select page up
        [:##period :!SCup_arrow] ; select to home
      ]
    }

    {:des "cursor: multi select and manipulate"
      :rules [:s-mode
        [:condi :code :s-mode]

        [:##h :multi_word_select]
        [:##u :!Odown_arrow]
        [:##i :!Oup_arrow]
        [:##j :!COdown_arrow]
        [:##k :!COup_arrow]
        [:##m :!SOdown_arrow]
        [:##comma :!SOup_arrow]
      ]
    }

    {:des "lauch mode"
      :rules [:launch-mode
      [:j [:launch "Visual Studio Code"]]    ;
      [:k [:launch "iTerm 2 Rosetta"]]    ;
      [:l [:launch "Firefox"]]    ;
      [:semicolon [:launch "Sourcetree"]]    ;
      [:u [:launch "Slack"]]    ;
      [:p [:open-a "1Password 7"]]    ;
      [:n [:open-a "Things3"]]    ;
      [:b [:open-a "Bear"]]    ;
      [:f [:open-a "Finder"]]    ;
      [:g [:open-a "Figma"]]    ;
      [:c [:open-a "Google Chrome"]]    ;
      [:v [:open-a "Preview"]]    ;
      [:i [:open-a "Simulator"]]    ;
    ]}

    {:des "window management"
      :rules [:w-mode
      [:8 [:!CTOleft_arrow]]    ;ShiftIt - move window to 50% left
      [:9 [:!CTOright_arrow]]    ;ShiftIt- move window to 50% right
      [:0 [:!CTOm]]    ;ShiftIt - maximise the window
      [:h [:!Cgrave_accent_and_tilde]]    ;cycle through windows for an application.
      [:j :!Ttab]    ; ctrl + tab - cycle through tabs
      [:k :!STtab]    ; shift + ctrl + tab - reverse cycle through tabs
      [:l :!Cw]    ; close tab
      [:m :!Cm]    ; minimize window
    ]}

    {:des "editor mode (VS CODE)"
      :rules [
      [:condi :code :e-mode]
      [:h [:!Copen_bracket]] ; vscode indent left
      [:l [:!Cclose_bracket]] ; vscode indent right
      [:u [:!C1]] ; open/switch to group 1
      [:i [:!C2]] ; open/switch to group 2
      [:t [:!Cp]] ; search and open file
    ]}

    {:des "website-mode"
      :rules [:1-mode
      ;open urls to often visited websites
      [:a [:open-firefox "analytics.google.com/analytics/web"]]
      [:e [:open-firefox "gmail.com"]]
      [:c [:open-firefox "search.google.com/search-console"]]
      [:s [:open-firefox "stripe.com/dashboard"]]
      [:h [:open-firefox "dashboard.heroku.com"]]
      [:g [:open-firefox "github.com"]]
      [:y [:open-firefox "youtube.com"]]
      [:m [:open-firefox "youtube.com/playlist?list=PLGMD2WaLNtFXg4PU7U3LuisbQjdDDUyLW"]] ; my youtube music playlist
      ;; [:t [:open-firefox "tacchistudios.harvestapp.com/time"]] ; move to a tacchi/work sim key?
      [:o [:open-firefox "onelook.com/"]]
      [:t [:open-firefox "translate.google.com"]]
      ; [:j [:open-firefox "js.new"]];
      ; [:k [:open-firefox "github.com/search?q=extension%3A.edn+filename%3Akarabiner.edn&type=Code&ref=advsearch&l=&l="]]
      ; [:l [:open-firefox "localhost:3000"]]
      ; [a:m [:open-firefox "access.mymind.com/cards"]]
      ; [:n [:open-firefox "news.google.com"]]
      [:r [:open-firefox "app.grammarly.com"]]
      ; [:t [:open-firefox "twitter.com"]]
      ; [:u [:open-firefox "egghead.io/lessons/new"]];Upload
      ; [:x [:open-firefox "next.egghead.io"]]
      ; [:y [:open-firefox "youtube.com"]]
    ]}

    {:des "emoji"
         :rules [:quote-mode
                 [:a [:paste "ü§Ø"]] ;
                 [:b [:paste "üòä"]] ;blush
                 [:c [:paste "üëè"]] ;clap
                 [:d [:paste "üßê"]] ;dignified
                 [:e :emoji_picker]
                 [:f [:paste "ü§¶‚Äç‚ôÇÔ∏è"]] ;facepalmÔ∏è
                 [:g [:paste "üò¨"]] ;grimace
                 [:h [:paste "üòç"]] ;heart-eyes
                 [:i [:paste "üëÄ"]] ;I
                 [:j [:paste "üòÇ"]] ;joking
                 [:k [:paste ""]] ;
                 [:l [:paste "‚ù§Ô∏è"]] ;love
                 [:m [:paste "üí™"]] ;muscl
                 [:n :emoji_picker] ;
                 [:o [:paste "üí©"]] ;pOop
                 [:p [:paste "üéâ"]] ;party
                 [:q [:paste "ü§´"]] ;quiet
                 [:r [:paste "üèé"]] ;racecar
                 [:s [:paste "üò¢"]] ;sad
                 [:t [:paste "ü§î"]] ;thinking
                 [:u [:paste "ü§∑‚Äç‚ôÇÔ∏è"]] ;shrUg
                 [:v [:paste "üòé"]] ;very cool
                 [:w [:paste "üòâ"]] ;wink:
                 [:x [:paste "üòµ"]] ;x-eyes
                 [:y [:paste "üòÖ"]] ;sweatY
                 [:comma [:paste "üëá"]] ;sweatYu
                 [:period [:paste "‚òù"]] ;sweatYu
                 [:left_command [:paste "üëç"]]
                 [:left_option [:paste "üëé"]]
                 ;
                 ]}

    {:des "disabled keys"
      :rules [
        ; [:left_arrow :vk_none]
        ; [:right_arrow :vk_none]
        ; [:down_arrow :vk_none]
        ; [:up_arrow :vk_none]
        [:!Ctab :vk_none] ; ctrl tab
        [:!Ttab :vk_none]    ; ctrl + tab - cycle through tabs
        [:!STtab :vk_none]    ; shift + ctrl + tab - reverse cycle through tabs
        [:!Cw :vk_none]    ; close tab

        [:condi :code]
        [:!Copen_bracket :vk_none ]; vscode indent left
        [:!Cclose_bracket :vk_none ]; vscode indent right
        [:!C1 :vk_none ] ; open/switch to group 1
        [:!C2 :vk_none] ; open/switch to group 2
        [:!Cp :vk_none] ; search and open file
      ]
    }
  ]
}




; rule [:period ["media-mode" 1] nil {:afterup ["media-mode" 0] :alone :period}]
;;       |_____| |_______________| |_| |_________________________________________|
;;        <from>    <to>      <conditions>         <other options>

    ;; !  | means mandatory
    ;; #  | means optional
    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;;
    ;; !! | mandatory command + control + optional + shift (hyper)
    ;; ## | optional any
;;
